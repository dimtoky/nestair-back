generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OAuthClients {
  id           Int      @id @default(autoincrement())
  clientId     String?  @db.VarChar(255)
  clientSecret String?  @db.VarChar(255)
  redirectUris String?  @db.VarChar(255)
  grants       String[] @db.VarChar(255)
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)
}

model OAuthTokens {
  id                    Int       @id @default(autoincrement())
  accessToken           String?   @db.VarChar(255)
  accessTokenExpiresAt  DateTime? @db.Timestamptz(6)
  refreshToken          String?   @db.VarChar(255)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(6)
  clientId              Int?
  userId                Int?
  createdAt             DateTime  @db.Timestamptz(6)
  updatedAt             DateTime  @db.Timestamptz(6)
}

model OAuthUsers {
  id        Int      @id @default(autoincrement())
  username  String?  @db.VarChar(255)
  password  String?  @db.VarChar(255)
  name      String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model t_ephemeride_history_eph {
  eph_id            Int          @default(autoincrement())
  eph_sns_id_fk     Int
  eph_year          Int?
  eph_month         Int?
  eph_day           Int?
  eph_max_temp      Float?
  eph_min_temp      Float?
  eph_max_wind      Float?
  eph_precipitation Float?
  t_sensor_sns      t_sensor_sns @relation(fields: [eph_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_ephemeride_history_eph")

  @@id([eph_id, eph_sns_id_fk], map: "pk_t_ephemeride_history_eph")
}

model t_location_sensor_lcs {
  lcs_id        Int            @id @default(autoincrement())
  lcs_adresses  String?
  lcs_zip       String?        @db.VarChar(50)
  lcs_city      String?        @db.VarChar(50)
  lcs_region    String?        @db.VarChar(50)
  lcs_latitude  Float?
  lcs_longitude Float?
  lcs_locality  String?        @db.VarChar(50)
  createdat     DateTime?      @db.Timestamptz(6)
  updatedat     DateTime?      @db.Timestamptz(6)
  t_router_rtr  t_router_rtr[]
}

model t_maintenance_routers_mr_tmp {
  mr_id                   Int          @default(autoincrement())
  mr_rtr_id_fk            Int
  mr_cpu                  Float?
  mr_cpu_kura             Float?
  mr_memory_store         Float?
  mr_memory_external      Float?
  mr_ram                  Float?
  mr_rtd_mqtt             Float?
  mr_nb_open_files        Int?
  mr_nb_connected_sensors Int?
  mr_state                Int?
  mr_rfn_time_event_msr   DateTime     @db.Timestamptz(6)
  mr_uptime               Int?
  t_router_rtr            t_router_rtr @relation(fields: [mr_rtr_id_fk], references: [rtr_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_maintenance_routers_ms")

  @@id([mr_id, mr_rtr_id_fk, mr_rfn_time_event_msr], map: "pk_t_maintenance_routers_ms")
}

model t_particles_alerts_pal {
  pal_id              Int          @default(autoincrement())
  pal_sns_id_fk       Int
  pal_event_type      String
  pal_metric_value    Float?
  pal_time_event_from DateTime     @db.Timestamptz(6)
  pal_time_event_to   DateTime     @db.Timestamptz(6)
  t_sensor_sns        t_sensor_sns @relation(fields: [pal_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_particles_alerts_pal_sns")

  @@id([pal_id, pal_sns_id_fk, pal_time_event_from], map: "pk_t_particles_alerts_pal")
  @@index([pal_sns_id_fk, pal_time_event_from])
  @@index([pal_time_event_from])
}

model t_particles_count_ptc {
  ptc_id                 Int          @default(autoincrement())
  ptc_sns_id_fk          Int
  ptc_particles_count    Float?
  ptc_rfn_time_event_msr DateTime     @db.Timestamptz(6)
  t_sensor_sns           t_sensor_sns @relation(fields: [ptc_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_particles_count_ptc")

  @@id([ptc_id, ptc_sns_id_fk, ptc_rfn_time_event_msr], map: "pk_t_particles_count_ptc")
  @@index([ptc_rfn_time_event_msr])
  @@index([ptc_sns_id_fk, ptc_rfn_time_event_msr])
}

model t_particles_count_ptc_tmp {
  ptc_id                 Int          @default(autoincrement())
  ptc_sns_id_fk          Int
  ptc_particles_count    Float?
  ptc_rfn_time_event_msr DateTime     @db.Timestamptz(6)
  t_sensor_sns           t_sensor_sns @relation(fields: [ptc_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_particles_count_ptc")

  @@id([ptc_id, ptc_sns_id_fk, ptc_rfn_time_event_msr], map: "pk_t_particles_count_ptc_tmp")
  @@index([ptc_rfn_time_event_msr])
  @@index([ptc_sns_id_fk, ptc_rfn_time_event_msr])
}

model t_precipitation_prc {
  prc_id                      Int          @default(autoincrement())
  prc_sns_id_fk               Int
  prc_precipitation_h         Float?
  prc_precipitation_type      Int?
  prc_precipitation_intensity Float?
  prc_rfn_time_event_msr      DateTime     @db.Timestamptz(6)
  t_sensor_sns                t_sensor_sns @relation(fields: [prc_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_precipitation_prc")

  @@id([prc_id, prc_sns_id_fk, prc_rfn_time_event_msr], map: "pk_t_precipitation_prc")
  @@index([prc_rfn_time_event_msr])
  @@index([prc_sns_id_fk, prc_rfn_time_event_msr])
}

model t_precipitation_prc_tmp {
  prc_id                      Int          @default(autoincrement())
  prc_sns_id_fk               Int
  prc_precipitation_h         Float?
  prc_precipitation_type      Int?
  prc_precipitation_intensity Float?
  prc_rfn_time_event_msr      DateTime     @db.Timestamptz(6)
  t_sensor_sns                t_sensor_sns @relation(fields: [prc_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_precipitation_prc")

  @@id([prc_id, prc_sns_id_fk, prc_rfn_time_event_msr], map: "pk_t_precipitation_prc_tmp")
  @@index([prc_rfn_time_event_msr])
  @@index([prc_sns_id_fk, prc_rfn_time_event_msr])
}

model t_router_rtr {
  rtr_id                       Int                            @id @default(autoincrement())
  rtr_lcs_id_fk                Int?
  rtr_type                     String?                        @db.VarChar(50)
  rtr_model                    String?                        @db.VarChar(50)
  rtr_sn                       String?                        @db.VarChar(100)
  rtr_made                     String?                        @db.VarChar(50)
  rtr_made_date                DateTime?                      @db.Timestamptz(6)
  rtr_router_power             Float?
  rtr_router_periode           String?                        @db.VarChar(50)
  rtr_router_memory            Float?
  rtr_router_autonomy          String?                        @db.VarChar(50)
  rtr_router_network           String?                        @db.VarChar(50)
  createdat                    DateTime                       @db.Timestamptz(6)
  updatedat                    DateTime                       @db.Timestamptz(6)
  t_location_sensor_lcs        t_location_sensor_lcs?         @relation(fields: [rtr_lcs_id_fk], references: [lcs_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_router_lcs")
  t_maintenance_routers_mr_tmp t_maintenance_routers_mr_tmp[]
  t_sensor_sns                 t_sensor_sns[]
}

model t_sensor_sns {
  sns_id                    Int                         @id @default(autoincrement())
  sns_rtr_id_fk             Int?
  sns_type                  String?                     @db.VarChar(50)
  sns_model                 String?                     @db.VarChar(50)
  sns_sn                    String?                     @db.VarChar(100)
  sns_made                  String?                     @db.VarChar(100)
  sns_made_date             DateTime?                   @db.Timestamptz(6)
  sns_sensor_power          Float?
  sns_sensor_feature        String?                     @db.VarChar(100)
  sns_sensor_periode        String?                     @db.VarChar(100)
  sns_sensor_memory         Float?
  sns_sensor_autonomy       String?                     @db.VarChar(100)
  createdat                 DateTime                    @db.Timestamptz(6)
  updatedat                 DateTime                    @db.Timestamptz(6)
  t_router_rtr              t_router_rtr?               @relation(fields: [sns_rtr_id_fk], references: [rtr_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_sensor_sns_rtr")
  t_ephemeride_history_eph  t_ephemeride_history_eph[]
  t_particles_alerts_pal    t_particles_alerts_pal[]
  t_particles_count_ptc     t_particles_count_ptc[]
  t_particles_count_ptc_tmp t_particles_count_ptc_tmp[]
  t_precipitation_prc       t_precipitation_prc[]
  t_precipitation_prc_tmp   t_precipitation_prc_tmp[]
  t_sound_alerts_sal        t_sound_alerts_sal[]
  t_sound_level_sdl         t_sound_level_sdl[]
  t_sound_level_sdl_tmp     t_sound_level_sdl_tmp[]
  t_weather_alerts_wal      t_weather_alerts_wal[]
  t_weather_sensor_wts      t_weather_sensor_wts[]
  t_weather_sensor_wts_tmp  t_weather_sensor_wts_tmp[]
}

model t_sound_alerts_sal {
  sal_id              Int          @default(autoincrement())
  sal_sns_id_fk       Int
  sal_event_type      String
  sal_metric_value    Float?
  sal_time_event_from DateTime     @db.Timestamptz(6)
  sal_time_event_to   DateTime     @db.Timestamptz(6)
  t_sensor_sns        t_sensor_sns @relation(fields: [sal_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_sound_alerts_sal_sns")

  @@id([sal_id, sal_sns_id_fk, sal_time_event_from], map: "pk_t_sound_alerts_sal")
  @@index([sal_sns_id_fk, sal_time_event_from])
  @@index([sal_time_event_from])
}

model t_sound_level_sdl {
  sdl_id                  Int          @default(autoincrement())
  sdl_sns_id_fk           Int
  sdl_sound_level_min     Float?
  sdl_sound_level_first_q Float?
  sdl_sound_level_median  Float?
  sdl_sound_level_mean    Float?
  sdl_sound_level_third_q Float?
  sdl_sound_level_max     Float?
  sdl_rfn_time_event_msr  DateTime     @db.Timestamptz(6)
  t_sensor_sns            t_sensor_sns @relation(fields: [sdl_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_sound_level_sdl")

  @@id([sdl_id, sdl_sns_id_fk, sdl_rfn_time_event_msr], map: "pk_t_sound_level_sdl")
  @@index([sdl_rfn_time_event_msr])
  @@index([sdl_sns_id_fk, sdl_rfn_time_event_msr])
}

model t_sound_level_sdl_tmp {
  sdl_id                 Int          @default(autoincrement())
  sdl_sns_id_fk          Int
  sdl_sound_level        Float?
  sdl_rfn_time_event_msr DateTime     @db.Timestamptz(6)
  t_sensor_sns           t_sensor_sns @relation(fields: [sdl_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_sound_level_sdl")

  @@id([sdl_id, sdl_sns_id_fk, sdl_rfn_time_event_msr], map: "pk_t_sound_level_sdl_tmp")
  @@index([sdl_rfn_time_event_msr])
  @@index([sdl_sns_id_fk, sdl_rfn_time_event_msr])
}

model t_user_contact_urt {
  urt_id        Int         @id @default(autoincrement())
  urt_usr_id_fk Int?
  urt_mail      String?
  urt_phone     String?     @db.VarChar(20)
  createdat     DateTime    @db.Timestamptz(6)
  updatedat     DateTime    @db.Timestamptz(6)
  t_user_usr    t_user_usr? @relation(fields: [urt_usr_id_fk], references: [usr_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_user_contact_usr_urt")
}

model t_user_usr {
  usr_id                     Int                  @id @default(autoincrement())
  usr_last_name              String?              @db.VarChar(50)
  usr_first_name             String?              @db.VarChar(50)
  usr_corporate_name         String?              @db.VarChar(100)
  usr_picture                String?
  usr_login                  String
  usr_password               String
  usr_role                   String?              @db.VarChar(50)
  usr_access_level           Int?
  usr_status                 Boolean?
  usr_report                 Boolean?
  usr_mobile                 Boolean?
  usr_reset_password_token   DateTime?            @db.Timestamptz(6)
  usr_reset_password_expires DateTime?            @db.Timestamptz(6)
  createdat                  DateTime             @db.Timestamptz(6)
  updatedat                  DateTime             @db.Timestamptz(6)
  lastaccess                 DateTime             @db.Timestamptz(6)
  t_user_contact_urt         t_user_contact_urt[]

  @@index([usr_login, usr_password], map: "users_username_password")
}

model t_weather_alerts_wal {
  wal_id              Int          @default(autoincrement())
  wal_sns_id_fk       Int
  wal_event_type      String
  wal_metric_value    Float?
  wal_time_event_from DateTime     @db.Timestamptz(6)
  wal_time_event_to   DateTime     @db.Timestamptz(6)
  t_sensor_sns        t_sensor_sns @relation(fields: [wal_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_weather_alerts_wal_sns")

  @@id([wal_id, wal_sns_id_fk, wal_time_event_from], map: "pk_t_weather_alerts_wal")
  @@index([wal_sns_id_fk, wal_time_event_from])
  @@index([wal_time_event_from])
}

model t_weather_sensor_wts {
  wts_id                            Int          @default(autoincrement())
  wts_sns_id_fk                     Int
  wts_temperature                   Float?
  wts_humidity                      Float?
  wts_photosynthetically_active_rad Float?
  wts_infrared_rad                  Float?
  wts_gamma_rays                    Float?
  wts_ultraviolet_a_rad             Float?
  wts_ultraviolet_b_rad             Float?
  wts_ultraviolet_c_rad             Float?
  wts_radiation_solar               Float?
  wts_air_pressure                  Float?
  wts_temperature_dewpoint          Float?
  wts_temperature_windchill         Float?
  wts_wind_direction_degree         Float?
  wts_wind_direction                String?      @db.VarChar(20)
  wts_wind_speed                    Float?
  wts_wind_speed_fast               Float?
  wts_rfn_time_event_msr            DateTime     @db.Timestamptz(6)
  wts_latence_rout_sens             Float?
  wts_latence_serv_rout             Float?
  wts_latence_base_serv             Float?
  t_sensor_sns                      t_sensor_sns @relation(fields: [wts_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_weather_sensor_wts")

  @@id([wts_id, wts_sns_id_fk, wts_rfn_time_event_msr], map: "pk_t_weather_sensor_wts")
  @@index([wts_rfn_time_event_msr])
  @@index([wts_sns_id_fk, wts_rfn_time_event_msr])
}

model t_weather_sensor_wts_tmp {
  wts_id                            Int          @default(autoincrement())
  wts_sns_id_fk                     Int
  wts_temperature                   Float?
  wts_humidity                      Float?
  wts_photosynthetically_active_rad Float?
  wts_infrared_rad                  Float?
  wts_gamma_rays                    Float?
  wts_ultraviolet_a_rad             Float?
  wts_ultraviolet_b_rad             Float?
  wts_ultraviolet_c_rad             Float?
  wts_radiation_solar               Float?
  wts_air_pressure                  Float?
  wts_temperature_dewpoint          Float?
  wts_temperature_windchill         Float?
  wts_wind_direction_degree         Float?
  wts_wind_direction                String?      @db.VarChar(20)
  wts_wind_speed                    Float?
  wts_wind_speed_fast               Float?
  wts_rfn_time_event_msr            DateTime     @db.Timestamptz(6)
  wts_latence_rout_sens             Float?
  wts_latence_serv_rout             Float?
  wts_latence_base_serv             Float?
  t_sensor_sns                      t_sensor_sns @relation(fields: [wts_sns_id_fk], references: [sns_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t_weather_sensor_wts")

  @@id([wts_id, wts_sns_id_fk, wts_rfn_time_event_msr], map: "pk_t_weather_sensor_wts_tmp")
  @@index([wts_rfn_time_event_msr])
  @@index([wts_sns_id_fk, wts_rfn_time_event_msr])
}

model report_precipitation {
  group_time DateTime @unique @db.Timestamptz(6)
  sum        Float
}

model report_precipitation_intensity {
  prc_sns_id_fk               Int
  prc_precipitation_h         Float?
  prc_precipitation_type      Int?
  prc_precipitation_intensity Float?
  prc_rfn_time_event_msr      DateTime @unique @db.Timestamptz(6)
}

model report_temperature_4h_average {
  timestamp       DateTime @unique @db.Timestamptz(6)
  wts_sns_id_fk   Int
  wts_temperature Float?

}
